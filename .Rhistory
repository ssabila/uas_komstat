# Menambahkan ID urut
Data$ID <- seq_along(Data$Individual)
# Tampilkan hasil
print(Data)
#Uji Permutasi untuk independensi
independence_test(Length ~ HandCode, data = Data)
#Visualisasi data dengan boxplot
boxplot(Length ~ Hand,data=Data,ylab="Length, cm")
library(coin)
symmetry_test(Length ~ HandCode | ID, data = Data)
# Mengkodekan Hand: Right = 1, Left = 0
Data$HandCode[Data$Hand == 'Right'] <- 1
Data$HandCode[Data$Hand == 'Left'] <- 0
#Data$HandCode <- as.integer(Data$HandCode)
# Menambahkan ID urut
Data$ID <- seq_along(Data[,1])
# Tampilkan hasil
print(Data)
#Uji Permutasi untuk independensi
independence_test(Length ~ HandCode, data = Data)
#Visualisasi data dengan boxplot
boxplot(Length ~ Hand,data=Data,ylab="Length, cm")
library(coin)
symmetry_test(Length ~ HandCode | ID, data = Data)
library(coin)
#symmetry_test(Length ~ HandCode | ID, data = Data)
## Visualisasi data dengan scatter plot
Left <- Data$Length[Data$Hand == "Left"]
Right <- Data$Length[Data$Hand == "Right"]
plot(Left, Right,
pch = 16,            # Bentuk titik plot (bulat penuh)
cex = 1.0,           # Ukuran titik plot
xlim = c(13, 22),    # Rentang sumbu x
ylim = c(13, 22),    # Rentang sumbu y
xlab = "Left hand",  # Label sumbu x
ylab = "Right hand"  # Label sumbu y
)
abline(0, 1, lty = 1)     # Garis y = x (referensi)
shiny::runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP')
library(haven)
T14.1 <- read_sav("T14.1.sav")
T14.2 <- read_sav("T14.2.sav")
T14.3 <- read_sav("T14.3.sav")
Y <- T14.1$Q
X <- T14.1$t
#melakukan transformasi untuk kedua variabel
ln_Y<-log(Y)                  # Tranformasi Ln pada variabel Y
ln_X<-log(X)                  # Tranformasi Ln pada variabel X
#Plot antara X dan Y (tanpa transformasi)
plot(x = X, y = Y,
xlab     = "Tahun",
ylab     = "Produksi perikanan laut yang dijual di TPI (ton)",
main     = "Scatter Plot antara Tahun dan Produksi perikanan laut yang dijual di TPI (ton)",
cex.main = 1)
#Plot antara X dan Y (setelah transformasi)
plot(x = ln_X, y = ln_Y,
xlab     = "ln(Tahun)",
ylab     = "ln(Produksi perikanan laut yang dijual di TPI)",
main     = "Scatter Plot antara ln(Tahun) dan ln(Produksi perikanan laut yang dijual di TPI)",
cex.main = 1)
Model1 <- lm(ln_Y~ln_X)
summary(Model1)
Y <- T14.1$Q
X <- T14.1$t
#melakukan transformasi untuk kedua variabel
ln_Y<-log(Y)                  # Tranformasi Ln pada variabel Y
#Plot antara X dan Y (tanpa transformasi)
plot(x = X, y = Y,
xlab     = "Tahun",
ylab     = "Produksi perikanan laut yang dijual di TPI (ton)",
main     = "Scatter Plot antara Tahun dan Produksi perikanan laut yang dijual di TPI (ton)",
cex.main = 1)
#Plot antara X dan Y (setelah transformasi)
plot(x = X, y = ln_Y,
xlab     = "ln(Tahun)",
ylab     = "ln(Produksi perikanan laut yang dijual di TPI)",
main     = "Scatter Plot antara ln(Tahun) dan ln(Produksi perikanan laut yang dijual di TPI)",
cex.main = 1)
Model1 <- lm(ln_Y~X)
summary(Model1)
X <- T14.1$t  #melakukan transformasi untuk kedua variabel  ln_Y<-log(Y)                  # Tranformasi Ln pada variabel Y
Y <- T14.2$Q
X1 <- T14.2$C
X2 <- T14.2$L
#melakukan transformasi untuk kedua variabel
ln_Y<-log(Y)                  # Tranformasi Ln pada variabel Y
ln_X1<-log(X1)                  # Tranformasi Ln pada variabel X1
ln_X2<-log(X2)                  # Tranformasi Ln pada variabel X2
#Plot antara X dan Y (tanpa transformasi)
plot(x = X1, y = Y,      xlab     = "Input Tenaga Kerja",      ylab     = "Output",      main     = "Scatter Plot antara Input Jam Kerja dengan Output",      cex.main = 1)
plot(x = X2, y = Y,      xlab     = "Input Tenaga Kerja",      ylab     = "Output",      main     = "Scatter Plot antara Input Tenaga Kerja dengan Output",      cex.main = 1)
#Plot antara X dan Y (setelah transformasi)
plot(x = ln_X1, y = ln_Y,      xlab     = "Ln Input Tenaga Kerja",      ylab     = "Ln Output",      main     = "Scatter Plot antara Ln Input Jam Kerja dengan Ln Output",      cex.main = 1)
plot(x = ln_X2, y = ln_Y,      xlab     = "Ln Input Tenaga Kerja",      ylab     = "Ln Output",      main     = "Scatter Plot antara Ln Input Tenaga Kerja dengan Ln Output",      cex.main = 1)
Model1 <- lm(ln_Y~ln_X1+ln_X2)
summary(Model1)
#Plot antara X dan Y (tanpa transformasi)
plot(x = X1, y = Y,      xlab     = "Input Modal",      ylab     = "Output",      main     = "Scatter Plot antara Input Modal dengan Output",      cex.main = 1)
plot(x = X2, y = Y,      xlab     = "Input Tenaga Kerja",      ylab     = "Output",      main     = "Scatter Plot antara Input Tenaga Kerja dengan Output",      cex.main = 1)
#Plot antara X dan Y (setelah transformasi)
plot(x = ln_X1, y = ln_Y,      xlab     = "Ln Input Modal",      ylab     = "Ln Output",      main     = "Scatter Plot antara Ln Input Modal dengan Ln Output",      cex.main = 1)
plot(x = ln_X2, y = ln_Y,      xlab     = "Ln Input Tenaga Kerja",      ylab     = "Ln Output",      main     = "Scatter Plot antara Ln Input Tenaga Kerja dengan Ln Output",      cex.main = 1)
Model2 <- lm(ln_Y~ln_X1+ln_X2)
summary(Model1)
anova(Model2)
Y <- T14.3$Y
X <- T14.3$X
#transformasi
sfdho <- Y/X
ln_X <- ln(X)
Y <- T14.3$Y
X <- T14.3$X
#transformasi
sfdho <- Y/X
ln_X <- log(X)
#Plot antara X dan Y (tanpa transformasi)
plot(x = X, y = Y,      xlab     = "Pengeluaran Rumah Tangga secara Total",      ylab     = "Konsumsi Makanan dan Minuman Tanpa Alkohol",      main     = "Scatter Plot antara Pengeluaran Rumah Tangga secara Total dengan Konsumsi Maknan dan Minuman Tanpa Alkohol",      cex.main = 1)
#Plot antara X dan Y (setelah transformasi)
plot(x = ln_X, y = sfdho,      xlab     = "Ln Pengeluaran Rumah Tangga secara Total",      ylab     = "Prorporsi Konsumsi Makanan dan Minuman Tanpa Alkohol",      main     = "Scatter Plot antara Ln Pengeluaran Rumah Tangga secara Total dengan Proporsi Konsumsi Maknan dan Minuman Tanpa Alkohol",      cex.main = 1,      cex.main = 1)
Model3 <- lm(sfdho~ln_X)
summary(Model3)
library(haven)
T14.1 <- read_sav("T14.1.sav")
T14.2 <- read_sav("T14.2.sav")
T14.3 <- read_sav("T14.3.sav")
Y <- T14.1$Q
X <- T14.1$t
#melakukan transformasi untuk kedua variabel
ln_Y<-log(Y)                  # Tranformasi Ln pada variabel Y
#Plot antara X dan Y (tanpa transformasi)
plot(x = X, y = Y,
xlab     = "Tahun",
ylab     = "Produksi perikanan laut yang dijual di TPI (ton)",
main     = "Scatter Plot antara Tahun dan Produksi perikanan laut yang dijual di TPI (ton)",
cex.main = 1)
#Plot antara X dan Y (setelah transformasi)
plot(x = X, y = ln_Y,
xlab     = "ln(Tahun)",
ylab     = "ln(Produksi perikanan laut yang dijual di TPI)",
main     = "Scatter Plot antara ln(Tahun) dan ln(Produksi perikanan laut yang dijual di TPI)",
cex.main = 1)
Model1 <- lm(ln_Y~X)
summary(Model1)
Y <- T14.2$Q
X1 <- T14.2$C
X2 <- T14.2$L
#melakukan transformasi untuk kedua variabel
ln_Y<-log(Y)                  # Tranformasi Ln pada variabel Y
ln_X1<-log(X1)                  # Tranformasi Ln pada variabel X1
ln_X2<-log(X2)                  # Tranformasi Ln pada variabel X2
#Plot antara X dan Y (tanpa transformasi)
plot(x = X1, y = Y,      xlab     = "Input Modal",      ylab     = "Output",      main     = "Scatter Plot antara Input Modal dengan Output",      cex.main = 1)
plot(x = X2, y = Y,      xlab     = "Input Tenaga Kerja",      ylab     = "Output",      main     = "Scatter Plot antara Input Tenaga Kerja dengan Output",      cex.main = 1)
#Plot antara X dan Y (setelah transformasi)
plot(x = ln_X1, y = ln_Y,      xlab     = "Ln Input Modal",      ylab     = "Ln Output",      main     = "Scatter Plot antara Ln Input Modal dengan Ln Output",      cex.main = 1)
plot(x = ln_X2, y = ln_Y,      xlab     = "Ln Input Tenaga Kerja",      ylab     = "Ln Output",      main     = "Scatter Plot antara Ln Input Tenaga Kerja dengan Ln Output",      cex.main = 1)
Model2 <- lm(ln_Y~ln_X1+ln_X2)
summary(Model1)
Y <- T14.3$Y
X <- T14.3$X
#transformasi
sfdho <- Y/X
ln_X <- log(X)
#Plot antara X dan Y (tanpa transformasi)
plot(x = X, y = Y,      xlab     = "Pengeluaran Rumah Tangga secara Total",      ylab     = "Konsumsi Makanan dan Minuman Tanpa Alkohol",      main     = "Scatter Plot antara Pengeluaran Rumah Tangga secara Total dengan Konsumsi Maknan dan Minuman Tanpa Alkohol",      cex.main = 1)
#Plot antara X dan Y (setelah transformasi)
plot(x = ln_X, y = sfdho,      xlab     = "Ln Pengeluaran Rumah Tangga secara Total",      ylab     = "Prorporsi Konsumsi Makanan dan Minuman Tanpa Alkohol",      main     = "Scatter Plot antara Ln Pengeluaran Rumah Tangga secara Total dengan Proporsi Konsumsi Maknan dan Minuman Tanpa Alkohol",      cex.main = 1,      cex.main = 1)
Model3 <- lm(sfdho~ln_X)
summary(Model3)
#Plot antara X dan Y (tanpa transformasi)
plot(x = X, y = Y,
xlab     = "Pengeluaran Rumah Tangga secara Total",
ylab     = "Konsumsi Makanan dan Minuman Tanpa Alkohol",
main     = "Scatter Plot antara Pengeluaran Rumah Tangga secara Total dengan
Konsumsi Maknan dan Minuman Tanpa Alkohol",
cex.main = 1)
#Plot antara X dan Y (setelah transformasi)
plot(x = ln_X, y = sfdho,
xlab     = "Ln Pengeluaran Rumah Tangga secara Total",
ylab     = "Prorporsi Konsumsi Makanan dan Minuman Tanpa Alkohol",
main     = "Scatter Plot antara Ln Pengeluaran Rumah Tangga secara Total dengan
Proporsi Konsumsi Maknan dan Minuman Tanpa Alkohol",
cex.main = 1,      cex.main = 1)
library(shiny); runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
runApp('E:/2KS2_SABILA/SEM 4/KOMSTAT/PROJECTS/APP/apl/app1.R')
shiny::runApp('E:/2KS2_SABILA/komstatuas')
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
runApp('E:/2KS2_SABILA/komstatuas')
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(car)
library(nortest)
library(stats)
library(readr)
library(dplyr)
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(RColorBrewer)
runApp('E:/2KS2_SABILA/komstatuas')
required_packages <- c("shiny", "shinydashboard", "DT", "plotly", "leaflet",
"dplyr", "ggplot2", "readr", "car", "nortest", "corrplot",
"RColorBrewer", "stringr", "geojsonio", "sp",
"leaflet.providers")
missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
required_packages <- c("shiny", "shinydashboard", "DT", "plotly", "leaflet",
"dplyr", "ggplot2", "readr", "car", "nortest", "corrplot",
"RColorBrewer", "stringr", "geojsonio", "sp",
"leaflet.providers")
missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
if(length(missing_packages) > 0) {
install.packages(missing_packages, dependencies = TRUE)
}
if(length(missing_packages) > 0) {
install.packages(missing_packages, dependencies = TRUE)
}
# =============================================================================
# APLIKASI UTAMA DASHBOARD KERENTANAN SOSIAL INDONESIA 2017
# =============================================================================
# Deskripsi: Dashboard interaktif untuk analisis data kerentanan sosial
# Author: AI Assistant
# Date: 2024
# =============================================================================
# Load required libraries
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
# Cek dan install package yang diperlukan jika belum ada
required_packages <- c("shiny", "shinydashboard", "DT", "plotly", "leaflet",
"dplyr", "ggplot2", "readr", "car", "nortest", "corrplot",
"RColorBrewer", "stringr", "geojsonio", "sp",
"leaflet.providers")
missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
if(length(missing_packages) > 0) {
install.packages(missing_packages, dependencies = TRUE)
}
if(length(missing_packages) > 0) {
install.packages(missing_packages, dependencies = TRUE)
}
# Load semua library yang diperlukan
lapply(required_packages, library, character.only = TRUE)
# Source semua modul
source("modules/data_module.R")
setwd("E:/2KS2_SABILA/komstatuas")
runApp()
# =============================================================================
# APLIKASI UTAMA DASHBOARD KERENTANAN SOSIAL INDONESIA 2017
# =============================================================================
# Deskripsi: Dashboard interaktif untuk analisis data kerentanan sosial
# Author: AI Assistant
# Date: 2024
# =============================================================================
# Load required libraries
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
# Cek dan install package yang diperlukan jika belum ada
required_packages <- c("shiny", "shinydashboard", "DT", "plotly", "leaflet",
"dplyr", "ggplot2", "readr", "car", "nortest", "corrplot",
"RColorBrewer", "stringr", "geojsonio", "sp",
"leaflet.providers")
missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
if(length(missing_packages) > 0) {
install.packages(missing_packages, dependencies = TRUE)
}
if(length(missing_packages) > 0) {
install.packages(missing_packages, dependencies = TRUE)
}
# Load semua library yang diperlukan
lapply(required_packages, library, character.only = TRUE)
# Source semua modul
source("modules/data_module.R")
source("modules/analysis_functions.R")
source("modules/visualization_functions.R")
# Load UI dan Server
source("ui.R")
source("server.R")
# Jalankan aplikasi
shinyApp(ui = ui, server = server)
runApp()
runApp()
# 3. LOGIKA UNTUK MERENDER PETA - SOLUSI FINAL
output$distribution_map <- renderLeaflet({
req(processed_data$current, indonesia_geojson(), input$map_var)
sovi_data_current <- processed_data$current
geojson <- indonesia_geojson()
variable_to_map <- input$map_var
# Validasi awal
if (is.null(geojson)) {
showNotification("Data peta tidak tersedia", type = "error")
return(leaflet() %>% addTiles() %>% setView(lng = 118, lat = -2, zoom = 4))
}
# Debug informasi
cat("=== DEBUG INFO ===\n")
cat("Data SOVI rows:", nrow(sovi_data_current), "\n")
cat("GeoJSON features:", nrow(geojson), "\n")
cat("Variable to map:", variable_to_map, "\n")
cat("Columns in SOVI:", paste(names(sovi_data_current), collapse = ", "), "\n")
cat("Columns in GeoJSON:", paste(names(geojson), collapse = ", "), "\n")
# Pastikan kolom kunci ada
if (!"DISTRICTCODE" %in% names(sovi_data_current)) {
showNotification("Kolom DISTRICTCODE tidak ditemukan dalam data CSV", type = "error")
return(leaflet() %>% addTiles() %>% setView(lng = 118, lat = -2, zoom = 4))
}
# Cari kolom ID yang sesuai dalam geojson
possible_id_cols <- c("ID", "KODE", "CODE", "DISTRICT_CODE", "KAB_CODE", "id", "kode")
id_col <- NULL
for (col in possible_id_cols) {
if (col %in% names(geojson)) {
id_col <- col
break
}
}
if (is.null(id_col)) {
showNotification("Kolom ID tidak ditemukan dalam data GeoJSON. Kolom yang tersedia: " %+%
paste(names(geojson), collapse = ", "), type = "error")
return(leaflet() %>% addTiles() %>% setView(lng = 118, lat = -2, zoom = 4))
}
cat("Using ID column:", id_col, "\n")
# Standarisasi format ID
sovi_data_current$DISTRICTCODE <- as.character(sovi_data_current$DISTRICTCODE)
geojson[[id_col]] <- as.character(geojson[[id_col]])
# Debug: Lihat beberapa sample ID
cat("Sample SOVI IDs:", head(sovi_data_current$DISTRICTCODE, 5), "\n")
cat("Sample GeoJSON IDs:", head(geojson[[id_col]], 5), "\n")
tryCatch({
# Merge data menggunakan sf
merged_data <- merge(geojson, sovi_data_current,
by.x = id_col, by.y = "DISTRICTCODE",
all.x = FALSE)
cat("Merged data rows:", nrow(merged_data), "\n")
if (nrow(merged_data) == 0) {
showNotification("GAGAL: Tidak ada data yang cocok antara peta dan data CSV. Periksa format DISTRICTCODE.",
type = "error", duration = NULL)
return(leaflet() %>%
addTiles() %>%
setView(lng = 118, lat = -2, zoom = 4) %>%
addMarkers(lng = 118, lat = -2, popup = "Tidak ada data yang cocok"))
}
# Pastikan variabel yang dipilih ada
if (!variable_to_map %in% names(merged_data)) {
showNotification(paste("Variabel", variable_to_map, "tidak ditemukan dalam data merged"), type = "error")
return(leaflet() %>% addTiles() %>% setView(lng = 118, lat = -2, zoom = 4))
}
# Ekstrak dan bersihkan nilai
map_values <- as.numeric(merged_data[[variable_to_map]])
map_values_clean <- map_values[!is.na(map_values)]
if (length(map_values_clean) == 0) {
showNotification("Tidak ada data numerik yang valid untuk dipetakan", type = "error")
return(leaflet() %>% addTiles() %>% setView(lng = 118, lat = -2, zoom = 4))
}
# Buat palette dengan range yang jelas
value_range <- range(map_values_clean, na.rm = TRUE)
pal <- colorNumeric(
palette = "YlOrRd",
domain = value_range,
na.color = "#CCCCCC"
)
# Buat labels untuk popup
kabkot_col <- NULL
for (col in c("KABKOT", "NAMA", "NAME", "KABUPATEN", "kabkot", "nama")) {
if (col %in% names(merged_data)) {
kabkot_col <- col
break
}
}
if (is.null(kabkot_col)) {
popup_labels <- sprintf(
"<strong>ID: %s</strong><br/>%s: %s",
merged_data[[id_col]],
variable_to_map,
ifelse(is.na(map_values), "N/A", sprintf("%.2f", map_values))
)
} else {
popup_labels <- sprintf(
"<strong>%s</strong><br/>%s: %s",
ifelse(is.na(merged_data[[kabkot_col]]),
paste("ID:", merged_data[[id_col]]),
as.character(merged_data[[kabkot_col]])),
variable_to_map,
ifelse(is.na(map_values), "N/A", sprintf("%.2f", map_values))
)
}
# Hitung center dari data
bbox <- sf::st_bbox(merged_data)
center_lng <- (bbox$xmin + bbox$xmax) / 2
center_lat <- (bbox$ymin + bbox$ymax) / 2
cat("Map center - lng:", center_lng, "lat:", center_lat, "\n")
# RENDER PETA FINAL
leaflet_map <- leaflet(merged_data) %>%
addTiles() %>%
setView(lng = center_lng, lat = center_lat, zoom = 5) %>%
addPolygons(
fillColor = ~pal(map_values),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
bringToFront = TRUE
),
popup = popup_labels,
label = ~paste(variable_to_map, ":",
ifelse(is.na(map_values), "N/A", round(map_values, 2))),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)
) %>%
addLegend(
pal = pal,
values = ~map_values_clean,
opacity = 0.7,
title = variable_to_map,
position = "bottomright"
)
# Tambahkan informasi debug sebagai marker jika diperlukan
if (nrow(merged_data) < 10) {
leaflet_map <- leaflet_map %>%
addMarkers(lng = center_lng, lat = center_lat,
popup = paste("Jumlah data yang ter-merge:", nrow(merged_data)))
}
return(leaflet_map)
}, error = function(e) {
cat("ERROR:", e$message, "\n")
showNotification(
paste("Error dalam rendering peta:", e$message),
type = "error",
duration = NULL
)
# Return peta dasar Indonesia jika ada error
return(leaflet() %>%
addTiles() %>%
setView(lng = 118, lat = -2, zoom = 4) %>%
addMarkers(lng = 118, lat = -2,
popup = paste("Error dalam rendering:", e$message)))
})
})
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(DT)
library(htmltools)
required_packages <- c("shiny", "shinydashboard", "DT", "plotly", "leaflet",
"dplyr", "ggplot2", "readr", "car", "nortest", "corrplot",
"RColorBrewer", "stringr", "geojsonio", "sp",
"leaflet.providers")
missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
if(length(missing_packages) > 0) {
install.packages(missing_packages, dependencies = TRUE)
}
if(length(missing_packages) > 0) {
install.packages(missing_packages, dependencies = TRUE)
}
# Load semua library yang diperlukan
lapply(required_packages, library, character.only = TRUE)
runApp()
runApp()
library(readr)
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
