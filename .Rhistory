shiny::runApp('E:/2KS2_SABILA/komstatuas')
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(bs4Dash)
runApp('E:/2KS2_SABILA/komstatuas')
runApp('E:/2KS2_SABILA/komstatuas')
library(ggplot2)
library(plotly)
library(dplyr)
library(reshape2)
library(e1071)  # untuk skewness dan kurtosis
runApp('E:/2KS2_SABILA/komstatuas')
runApp('E:/2KS2_SABILA/komstatuas')
runApp('E:/2KS2_SABILA/komstatuas')
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
runApp('E:/2KS2_SABILA/komstatuas')
runApp('E:/2KS2_SABILA/komstatuas')
runApp('E:/2KS2_SABILA/komstatuas')
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
# Load required libraries
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
# PERBAIKAN: Cek dan install package yang diperlukan
required_packages <- c("shiny", "shinydashboard", "DT", "plotly", "leaflet",
"dplyr", "ggplot2", "readr", "car", "nortest", "corrplot",
"RColorBrewer", "stringr", "geojsonio", "sp",
"leaflet.providers", "rmarkdown", "knitr")
missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
if(length(missing_packages) > 0) {
cat("Installing missing packages:", paste(missing_packages, collapse = ", "), "\n")
install.packages(missing_packages, dependencies = TRUE)
}
# Load semua library yang diperlukan
loaded_packages <- sapply(required_packages, function(pkg) {
tryCatch({
library(pkg, character.only = TRUE)
return(TRUE)
}, error = function(e) {
cat("Failed to load package:", pkg, "-", e$message, "\n")
return(FALSE)
})
})
# Report loading status
cat("Package loading status:\n")
for(i in 1:length(loaded_packages)) {
status <- if(loaded_packages[i]) "‚úì" else "‚úó"
cat(status, names(loaded_packages)[i], "\n")
}
cat("\n=== Loading Modules ===\n")
module_files <- c(
"modules/data_module.R",
"modules/analysis_functions.R",
"modules/visualization_functions.R"
)
for(module in module_files) {
if(file.exists(module)) {
tryCatch({
source(module)
cat("‚úì Loaded:", module, "\n")
}, error = function(e) {
cat("‚úó Error loading", module, ":", e$message, "\n")
})
} else {
cat("‚úó File not found:", module, "\n")
}
}
cat("\n=== Loading UI and Server ===\n")
if(file.exists("ui.R")) {
tryCatch({
source("ui.R")
cat("‚úì Loaded: ui.R\n")
}, error = function(e) {
cat("‚úó Error loading ui.R:", e$message, "\n")
stop("Cannot load UI")
})
} else {
stop("ui.R file not found")
}
runApp('E:/2KS2_SABILA/komstatuas')
setwd("E:/2KS2_SABILA/komstatuas")
runApp()
# Load required libraries
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
# PERBAIKAN: Cek dan install package yang diperlukan
required_packages <- c("shiny", "shinydashboard", "DT", "plotly", "leaflet",
"dplyr", "ggplot2", "readr", "car", "nortest", "corrplot",
"RColorBrewer", "stringr", "geojsonio", "sp",
"leaflet.providers", "rmarkdown", "knitr")
missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
if(length(missing_packages) > 0) {
cat("Installing missing packages:", paste(missing_packages, collapse = ", "), "\n")
install.packages(missing_packages, dependencies = TRUE)
}
# Load semua library yang diperlukan
loaded_packages <- sapply(required_packages, function(pkg) {
tryCatch({
library(pkg, character.only = TRUE)
return(TRUE)
}, error = function(e) {
cat("Failed to load package:", pkg, "-", e$message, "\n")
return(FALSE)
})
})
# Report loading status
cat("Package loading status:\n")
for(i in 1:length(loaded_packages)) {
status <- if(loaded_packages[i]) "‚úì" else "‚úó"
cat(status, names(loaded_packages)[i], "\n")
}
cat("\n=== Loading Modules ===\n")
module_files <- c(
"modules/data_module.R",
"modules/analysis_functions.R",
"modules/visualization_functions.R"
)
for(module in module_files) {
if(file.exists(module)) {
tryCatch({
source(module)
cat("‚úì Loaded:", module, "\n")
}, error = function(e) {
cat("‚úó Error loading", module, ":", e$message, "\n")
})
} else {
cat("‚úó File not found:", module, "\n")
}
}
cat("\n=== Loading UI and Server ===\n")
if(file.exists("ui.R")) {
tryCatch({
source("ui.R")
cat("‚úì Loaded: ui.R\n")
}, error = function(e) {
cat("‚úó Error loading ui.R:", e$message, "\n")
stop("Cannot load UI")
})
} else {
stop("ui.R file not found")
}
# diagnostic_app.R - Script untuk menemukan file UI yang bermasalah
# Load required libraries
library(shiny)
library(shinydashboard)
# Test each UI file individually
ui_files <- c(
"ui/beranda_ui.R",
"ui/user_guide_ui.R",
"ui/data_management_ui.R",
"ui/descriptive_ui.R",
"ui/visualization_ui.R",
"ui/mapping_ui.R",
"ui/assumptions_ui.R",
"ui/ttest_ui.R",
"ui/proportion_ui.R",
"ui/variance_ui.R",
"ui/anova_ui.R",
"ui/regression_ui.R",
"ui/download_ui.R"
)
cat("=== TESTING UI FILES INDIVIDUALLY ===\n")
# Test each file
for(ui_file in ui_files) {
cat("\n--- Testing:", ui_file, "---\n")
if(!file.exists(ui_file)) {
cat("‚ùå File not found\n")
next
}
tryCatch({
# Try to source the file
source(ui_file, local = TRUE)
cat("‚úÖ File loads successfully\n")
}, error = function(e) {
cat("‚ùå ERROR:", e$message, "\n")
# Check for specific tabsetPanel issues
file_content <- readLines(ui_file, warn = FALSE)
# Look for tabsetPanel patterns
tabset_lines <- grep("tabsetPanel", file_content, ignore.case = TRUE)
if(length(tabset_lines) > 0) {
cat("üîç Found tabsetPanel at lines:", paste(tabset_lines, collapse = ", "), "\n")
# Check each tabsetPanel line
for(line_num in tabset_lines) {
line_content <- file_content[line_num]
cat("   Line", line_num, ":", trimws(line_content), "\n")
# Check for missing type parameter
if(!grepl("type\\s*=", line_content)) {
cat("   ‚ö†Ô∏è  Missing 'type' parameter\n")
}
}
}
# Look for tabPanel with complex titles
complex_title_lines <- grep("title\\s*=\\s*div\\s*\\(", file_content)
if(length(complex_title_lines) > 0) {
cat("üîç Found complex titles at lines:", paste(complex_title_lines, collapse = ", "), "\n")
}
})
}
cat("\n=== CREATING MINIMAL TEST UI ===\n")
# Create a minimal UI to test basic structure
test_ui <- dashboardPage(
dashboardHeader(title = "Test"),
dashboardSidebar(),
dashboardBody(
# Test a simple tabsetPanel
tryCatch({
tabsetPanel(
id = "test_tabs",
type = "tabs",
tabPanel(title = "Test", value = "test", h3("Test content"))
)
cat("‚úÖ Basic tabsetPanel works\n")
}, error = function(e) {
cat("‚ùå Basic tabsetPanel ERROR:", e$message, "\n")
})
)
)
# Test if basic UI works
cat("\n=== TESTING BASIC TABSETPANEL ===\n")
tryCatch({
# Just create the structure, don't run the app
cat("‚úÖ Basic UI structure is valid\n")
}, error = function(e) {
cat("‚ùå Basic UI ERROR:", e$message, "\n")
})
# simple_test.R - Script untuk test dan debug error tabsetPanel
# Load minimal libraries
library(shiny)
library(shinydashboard)
cat("=== DEBUGGING TABSETPANEL ERROR ===\n")
# Test 1: Basic tabsetPanel
cat("\n1. Testing basic tabsetPanel...\n")
tryCatch({
test_tabset <- tabsetPanel(
id = "test1",
type = "tabs",
tabPanel(title = "Tab1", value = "tab1", h3("Content 1")),
tabPanel(title = "Tab2", value = "tab2", h3("Content 2"))
)
cat("‚úÖ Basic tabsetPanel works\n")
}, error = function(e) {
cat("‚ùå Basic tabsetPanel ERROR:", e$message, "\n")
})
# Test 2: tabsetPanel with missing type
cat("\n2. Testing tabsetPanel without type...\n")
tryCatch({
test_tabset_bad <- tabsetPanel(
id = "test2",
# Missing type parameter
tabPanel(title = "Tab1", h3("Content 1"))
)
cat("‚ö†Ô∏è tabsetPanel without type works (unexpected)\n")
}, error = function(e) {
cat("‚ùå tabsetPanel without type ERROR:", e$message, "\n")
})
# Test 3: tabsetPanel with no parameters
cat("\n3. Testing tabsetPanel with minimal parameters...\n")
tryCatch({
test_tabset_minimal <- tabsetPanel(
tabPanel("Tab1", h3("Content 1"))
)
cat("‚ö†Ô∏è Minimal tabsetPanel works (unexpected)\n")
}, error = function(e) {
cat("‚ùå Minimal tabsetPanel ERROR:", e$message, "\n")
})
# Test 4: tabsetPanel with div() in title
cat("\n4. Testing tabsetPanel with complex title...\n")
tryCatch({
test_tabset_complex <- tabsetPanel(
id = "test4",
type = "tabs",
tabPanel(title = div(icon("table"), "Complex Title"), h3("Content"))
)
cat("‚úÖ Complex title works\n")
}, error = function(e) {
cat("‚ùå Complex title ERROR:", e$message, "\n")
})
# Test 5: Empty tabsetPanel
cat("\n5. Testing empty tabsetPanel...\n")
tryCatch({
test_tabset_empty <- tabsetPanel()
cat("‚ö†Ô∏è Empty tabsetPanel works (unexpected)\n")
}, error = function(e) {
cat("‚ùå Empty tabsetPanel ERROR:", e$message, "\n")
})
# Test 6: Check if the issue is in function call vs UI context
cat("\n6. Testing tabsetPanel in UI context...\n")
tryCatch({
test_ui <- fluidPage(
tabsetPanel(
id = "test_ui",
type = "tabs",
tabPanel(title = "Test", value = "test", h3("Test"))
)
)
cat("‚úÖ tabsetPanel in UI context works\n")
}, error = function(e) {
cat("‚ùå tabsetPanel in UI context ERROR:", e$message, "\n")
})
cat("\n=== DEBUGGING COMPLETE ===\n")
cat("If all tests pass, the issue might be:\n")
cat("1. In how files are being sourced\n")
cat("2. In the specific syntax used in UI files\n")
cat("3. In the order of library loading\n")
cat("4. In nested tabsetPanel structures\n")
# Specific test for the user guide structure
cat("\n=== TESTING USER GUIDE STRUCTURE ===\n")
tryCatch({
# Simulate the problematic structure from user guide
user_guide_test <- tabsetPanel(
id = "guide_tabs",
type = "tabs",
tabPanel(
title = "Statistik Inferensia",
value = "inference",
# This is where the nested tabsetPanel was causing issues
div(
h3("Content without nested tabsetPanel"),
p("This should work fine now")
)
)
)
cat("‚úÖ User guide structure test PASSED\n")
}, error = function(e) {
cat("‚ùå User guide structure ERROR:", e$message, "\n")
})
runApp()
library(bs4Dash)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/2KS2_SABILA/komstat_uas')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/2KS2_SABILA/komstatuass')
runApp('E:/2KS2_SABILA/komstatuass')
runApp('E:/2KS2_SABILA/komstatuass')
runApp('E:/2KS2_SABILA/komstatuass')
