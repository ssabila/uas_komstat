if(length(complex_title_lines) > 0) {
cat("🔍 Found complex titles at lines:", paste(complex_title_lines, collapse = ", "), "\n")
}
})
}
cat("\n=== CREATING MINIMAL TEST UI ===\n")
# Create a minimal UI to test basic structure
test_ui <- dashboardPage(
dashboardHeader(title = "Test"),
dashboardSidebar(),
dashboardBody(
# Test a simple tabsetPanel
tryCatch({
tabsetPanel(
id = "test_tabs",
type = "tabs",
tabPanel(title = "Test", value = "test", h3("Test content"))
)
cat("✅ Basic tabsetPanel works\n")
}, error = function(e) {
cat("❌ Basic tabsetPanel ERROR:", e$message, "\n")
})
)
)
# Test if basic UI works
cat("\n=== TESTING BASIC TABSETPANEL ===\n")
tryCatch({
# Just create the structure, don't run the app
cat("✅ Basic UI structure is valid\n")
}, error = function(e) {
cat("❌ Basic UI ERROR:", e$message, "\n")
})
# simple_test.R - Script untuk test dan debug error tabsetPanel
# Load minimal libraries
library(shiny)
library(shinydashboard)
cat("=== DEBUGGING TABSETPANEL ERROR ===\n")
# Test 1: Basic tabsetPanel
cat("\n1. Testing basic tabsetPanel...\n")
tryCatch({
test_tabset <- tabsetPanel(
id = "test1",
type = "tabs",
tabPanel(title = "Tab1", value = "tab1", h3("Content 1")),
tabPanel(title = "Tab2", value = "tab2", h3("Content 2"))
)
cat("✅ Basic tabsetPanel works\n")
}, error = function(e) {
cat("❌ Basic tabsetPanel ERROR:", e$message, "\n")
})
# Test 2: tabsetPanel with missing type
cat("\n2. Testing tabsetPanel without type...\n")
tryCatch({
test_tabset_bad <- tabsetPanel(
id = "test2",
# Missing type parameter
tabPanel(title = "Tab1", h3("Content 1"))
)
cat("⚠️ tabsetPanel without type works (unexpected)\n")
}, error = function(e) {
cat("❌ tabsetPanel without type ERROR:", e$message, "\n")
})
# Test 3: tabsetPanel with no parameters
cat("\n3. Testing tabsetPanel with minimal parameters...\n")
tryCatch({
test_tabset_minimal <- tabsetPanel(
tabPanel("Tab1", h3("Content 1"))
)
cat("⚠️ Minimal tabsetPanel works (unexpected)\n")
}, error = function(e) {
cat("❌ Minimal tabsetPanel ERROR:", e$message, "\n")
})
# Test 4: tabsetPanel with div() in title
cat("\n4. Testing tabsetPanel with complex title...\n")
tryCatch({
test_tabset_complex <- tabsetPanel(
id = "test4",
type = "tabs",
tabPanel(title = div(icon("table"), "Complex Title"), h3("Content"))
)
cat("✅ Complex title works\n")
}, error = function(e) {
cat("❌ Complex title ERROR:", e$message, "\n")
})
# Test 5: Empty tabsetPanel
cat("\n5. Testing empty tabsetPanel...\n")
tryCatch({
test_tabset_empty <- tabsetPanel()
cat("⚠️ Empty tabsetPanel works (unexpected)\n")
}, error = function(e) {
cat("❌ Empty tabsetPanel ERROR:", e$message, "\n")
})
# Test 6: Check if the issue is in function call vs UI context
cat("\n6. Testing tabsetPanel in UI context...\n")
tryCatch({
test_ui <- fluidPage(
tabsetPanel(
id = "test_ui",
type = "tabs",
tabPanel(title = "Test", value = "test", h3("Test"))
)
)
cat("✅ tabsetPanel in UI context works\n")
}, error = function(e) {
cat("❌ tabsetPanel in UI context ERROR:", e$message, "\n")
})
cat("\n=== DEBUGGING COMPLETE ===\n")
cat("If all tests pass, the issue might be:\n")
cat("1. In how files are being sourced\n")
cat("2. In the specific syntax used in UI files\n")
cat("3. In the order of library loading\n")
cat("4. In nested tabsetPanel structures\n")
# Specific test for the user guide structure
cat("\n=== TESTING USER GUIDE STRUCTURE ===\n")
tryCatch({
# Simulate the problematic structure from user guide
user_guide_test <- tabsetPanel(
id = "guide_tabs",
type = "tabs",
tabPanel(
title = "Statistik Inferensia",
value = "inference",
# This is where the nested tabsetPanel was causing issues
div(
h3("Content without nested tabsetPanel"),
p("This should work fine now")
)
)
)
cat("✅ User guide structure test PASSED\n")
}, error = function(e) {
cat("❌ User guide structure ERROR:", e$message, "\n")
})
runApp()
library(bs4Dash)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/2KS2_SABILA/komstat_uas')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/2KS2_SABILA/komstatuass')
runApp('E:/2KS2_SABILA/komstatuass')
runApp('E:/2KS2_SABILA/komstatuass')
runApp('E:/2KS2_SABILA/komstatuass')
shiny::runApp()
library(shiny)
library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
runApp()
runApp()
library(shiny)
#library(shinydashboard)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
library(bs4Dash)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tagList(
# Header Section
box(
title = "Uji Asumsi Statistik",
status = "primary",
solidHeader = TRUE,
width = 12,
style = "margin-bottom: 20px;",
p("Lakukan uji prasyarat sebelum analisis inferensia, seperti uji normalitas dan homogenitas variansi."),
div(
style = "background: #e3f2fd; padding: 15px; border-radius: 8px; border-left: 4px solid #2196f3; margin-top: 15px;",
icon("info-circle", style = "color: #2196f3; margin-right: 8px;"),
strong(" Catatan Penting:"),
tags$ul(
style = "margin-top: 10px; margin-bottom: 0;",
tags$li("Uji normalitas menggunakan Shapiro-Wilk Test"),
tags$li("Uji homogenitas menggunakan Levene Test"),
tags$li("Pastikan data memiliki variabel grup yang valid untuk uji homogenitas")
)
)
),
# Main Content - Two Column Layout
fluidRow(
style = "margin-top: 20px;",
# Column 1: Normality Test
column(
width = 6,
style = "padding-right: 15px;",
box(
title = "Uji Normalitas (Shapiro-Wilk)",
status = "info",
solidHeader = TRUE,
width = 12,
style = "min-height: 900px;",
# Input Section
div(
style = "background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;",
h5(" Pengaturan Uji", style = "margin-top: 0; color: #495057;"),
uiOutput("normality_variable_selector"),
div(
style = "text-align: center; margin-top: 15px;",
actionButton("run_normality_test",
" Jalankan Uji Normalitas",
class = "btn-success btn-lg",
icon = icon("play"),
style = "padding: 10px 30px; font-weight: bold;")
)
),
# Results Section
div(
style = "margin-bottom: 20px;",
h4(" Hasil Uji Statistik", style = "color: #495057; border-bottom: 2px solid #dee2e6; padding-bottom: 10px;"),
div(
style = "background: #ffffff; padding: 15px; border: 1px solid #dee2e6; border-radius: 8px; margin-top: 15px;",
verbatimTextOutput("normality_test_result")
)
),
# Q-Q Plot Section
div(
style = "margin-bottom: 20px;",
h4("Plot Q-Q", style = "color: #495057; border-bottom: 2px solid #dee2e6; padding-bottom: 10px;"),
div(
style = "background: #ffffff; padding: 15px; border: 1px solid #dee2e6; border-radius: 8px; margin-top: 15px;",
plotOutput("qq_plot", height = "350px")
)
),
# Download Section
div(
style = "background: #e9ecef; padding: 20px; border-radius: 8px; border-top: 3px solid #17a2b8;",
h4(" Unduh Hasil", style = "margin-top: 0; color: #495057;"),
fluidRow(
column(7,
radioButtons("normality_format",
"Pilih Format Download:",
choices = list(
"📄 PDF" = "pdf",
"📝 Word (.docx)" = "docx"
),
inline = FALSE,
selected = "pdf")
),
column(5,
div(
style = "margin-top: 25px;",
downloadButton("download_normality_result",
"📥 Download Laporan",
class = "btn-primary btn-lg",
style = "width: 100%; padding: 12px; font-weight: bold;")
)
)
)
)
)
),
# Column 2: Homogeneity Test
column(
width = 6,
style = "padding-left: 15px;",
box(
title = "Uji Homogenitas Variansi (Levene)",
status = "info",
solidHeader = TRUE,
width = 12,
style = "min-height: 900px;",
# Input Section
div(
style = "background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;",
h5(" Pengaturan Uji", style = "margin-top: 0; color: #856404;"),
uiOutput("homogeneity_variable_selector"),
uiOutput("homogeneity_group_selector"),
# Status Validasi
div(
style = "margin: 15px 0; padding: 12px; background: #f8f9fa; border-radius: 6px; border-left: 4px solid #ffc107;",
h6("  Status Validasi:", style = "margin-top: 0; color: #856404;"),
uiOutput("homogeneity_validation_status")
),
div(
style = "text-align: center; margin-top: 15px;",
actionButton("run_homogeneity_test",
" Jalankan Uji Homogenitas",
class = "btn-success btn-lg",
icon = icon("play"),
style = "padding: 10px 30px; font-weight: bold;")
)
),
# Results Section
div(
style = "margin-bottom: 20px;",
h4(" Hasil Uji Statistik", style = "color: #495057; border-bottom: 2px solid #dee2e6; padding-bottom: 10px;"),
div(
style = "background: #ffffff; padding: 15px; border: 1px solid #dee2e6; border-radius: 8px; margin-top: 15px; min-height: 300px;",
verbatimTextOutput("homogeneity_test_result")
)
),
# Download Section
div(
style = "background: #e9ecef; padding: 20px; border-radius: 8px; border-top: 3px solid #ffc107; margin-top: auto;",
h4(" Unduh Hasil", style = "margin-top: 0; color: #495057;"),
fluidRow(
column(7,
radioButtons("homogeneity_format",
"Pilih Format Download:",
choices = list(
"📄 PDF" = "pdf",
"📝 Word (.docx)" = "docx"
),
inline = FALSE,
selected = "pdf")
),
column(5,
div(
style = "margin-top: 25px;",
downloadButton("download_homogeneity_result",
"📥 Download Laporan",
class = "btn-primary btn-lg",
style = "width: 100%; padding: 12px; font-weight: bold;")
)
)
)
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
library(bs4Dash)
runApp()
library(rsconnect)
getwd
getwd()
rsconnect::deployApp()
library(shiny)
library(DT)
library(plotly)
library(leaflet)
library(dplyr)
library(ggplot2)
library(readr)
library(htmltools)
library(shinyjs)
library(here)
library(e1071)
library(reshape2)
library(bs4Dash)
runApp()
library(rsconnect)
getwd
getwd()
rsconnect::deployApp()
runApp()
runApp()
library(rsconnect)
# Deploy dengan force update
rsconnect::deployApp(
appName = "komstatuas",
forceUpdate = TRUE
)
library(rsconnect)
# Deploy dengan force update
rsconnect::deployApp(
appName = "komstatuas",
forceUpdate = TRUE
)
shiny::runApp()
runApp()
shiny::runApp()
runApp('E:/2KS2_SABILA/SEM 4/uas_komstat')
shiny::runApp('E:/2KS2_SABILA/SEM 4/uas_komstat')
runApp('E:/2KS2_SABILA/SEM 4/uas_komstat')
